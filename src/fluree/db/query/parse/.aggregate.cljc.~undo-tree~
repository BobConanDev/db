(undo-tree-save-format-version . 1)
"8977c633904675ad7e845f6fe7b4f0b7786cb6d4"
[nil nil nil nil (26068 53598 737893 0) 0 nil]
([nil nil ((#("f" 0 1 (fontified nil help-echo cider--help-echo cider-locals ("letfn" "coll"))) . -2294) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (2278 . 2295) (2273 . 2277) (2271 . 2274) (2269 . 2272) (#("f" 0 1 (fontified nil help-echo cider--help-echo cider-locals ("letfn"))) . -2269) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (2254 . 2270) (#("s" 0 1 (fontified t help-echo cider--help-echo cider-locals ("letfn"))) . -2254) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) 2255 (2252 . 2255) (2247 . 2252) (2248 . 2253) (#("     " 0 5 (fontified nil cider-locals ("letfn"))) . 2247) (undo-tree-id56 . -5) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -3) (undo-tree-id88 . -3) (undo-tree-id89 . -3) (undo-tree-id90 . -3) (undo-tree-id91 . -3) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (undo-tree-id103 . -5) (undo-tree-id104 . -5) (undo-tree-id105 . -5) (undo-tree-id106 . -5) (undo-tree-id107 . -5) (undo-tree-id108 . -5) (undo-tree-id109 . -5) (undo-tree-id110 . -5) (undo-tree-id111 . -5) (undo-tree-id112 . -5) (undo-tree-id113 . -5) (undo-tree-id114 . -5) (undo-tree-id115 . -5) (undo-tree-id116 . -5) (undo-tree-id117 . -5) (undo-tree-id118 . -5) (undo-tree-id119 . -5) (undo-tree-id120 . -5) (undo-tree-id121 . -5) (undo-tree-id122 . -5) (undo-tree-id123 . -5) (undo-tree-id124 . -5) (undo-tree-id125 . -5) (undo-tree-id126 . -5) (undo-tree-id127 . -5) (undo-tree-id128 . -5) (undo-tree-id129 . -5) (undo-tree-id130 . -5) (undo-tree-id131 . -5) (undo-tree-id132 . -5) (undo-tree-id133 . -5) (undo-tree-id134 . -5) (2252 . 2253) (t 25690 28746 782012 712000)) nil (26068 53598 737888 0) 0 nil])
([nil nil ((#("distinct       (fn [coll] (distinct coll))
     '" 0 16 (fontified t help-echo cider--help-echo cider-locals ("letfn")) 16 18 (fontified t help-echo cider--help-echo cider-locals ("letfn") face font-lock-keyword-face) 18 27 (fontified t help-echo cider--help-echo cider-locals ("letfn" "coll")) 27 35 (fontified t help-echo cider--help-echo cider-locals ("letfn" "coll") face font-lock-function-name-face) 35 41 (fontified t help-echo cider--help-echo cider-locals ("letfn" "coll")) 41 42 (fontified t help-echo cider--help-echo cider-locals ("letfn" "coll")) 42 43 (fontified t help-echo cider--help-echo cider-locals ("letfn")) 43 49 (fontified t help-echo cider--help-echo cider-locals ("letfn"))) . 2253) (undo-tree-id223 . -42) (undo-tree-id224 . 8) (undo-tree-id225 . -40) (undo-tree-id226 . -40) (t 26068 53598 739850 347000)) nil (26068 58465 928303 0) 0 nil])
([nil current ((#("f" 0 1 (fontified nil help-echo cider--help-echo cider-locals ("letfn" "coll"))) . -2294) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (2286 . 2295) (2277 . 2286) (#("[" 0 1 (fontified t help-echo cider--help-echo cider-locals ("letfn" "variance" "'variance" "sum" "'sum" "str" "'str" "stddev" "'stddev" "coll" "shuffle" "n" "take" "vec" "coll" "n" "fn" "'sample" "coll" "rand-nth" "#" "n" "repeatedly" "vec" "coll" "n" "coll" "rand-nth" "coll" "fn" "'rand" "coll" "acc" "x" "acc" "next" "conj" "compare" "sort" "acc" "first" "x" "compare" "pos?" "x" "acc" "conj" "compare" "sort" "n" "acc" "count" "<" "cond" "x" "acc" "fn" "reduce" "vec" "coll" "n" "coll" "next" "coll" "first" "acc" "x" "acc" "x" "compare" "pos?" "if" "x" "acc" "fn" "reduce" "coll" "fn" "'max" "coll" "acc" "x" "acc" "butlast" "conj" "compare" "sort" "acc" "last" "x" "compare" "neg?" "x" "acc" "conj" "compare" "sort" "n" "acc" "count" "<" "cond" "x" "acc" "fn" "reduce" "vec" "coll" "n" "coll" "next" "coll" "first" "acc" "x" "acc" "x" "compare" "neg?" "if" "x" "acc" "fn" "reduce" "coll" "fn" "'min" "median" "'median" "concat" "'groupconcat" "dec" "int" "n" "->" "0" "n" "<" "int" "n" "->" "0" "n" ">" "n" "n" "int" "n" "=" "cond" "n" "fn" "'floor" "coll"))) . -2277) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) 2278 (2269 . 2278) (#("f" 0 1 (fontified nil help-echo cider--help-echo cider-locals ("letfn"))) . -2269) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (2269 . 2270) 2270 (2252 . 2270) (2247 . 2252) (2248 . 2253) (#("     " 0 5 (fontified nil help-echo cider--help-echo cider-locals ("letfn"))) . 2247) (undo-tree-id191 . -5) (undo-tree-id192 . -5) (undo-tree-id193 . -5) (undo-tree-id194 . -5) (undo-tree-id195 . -5) (undo-tree-id196 . -5) (undo-tree-id197 . -5) (undo-tree-id198 . -5) (undo-tree-id199 . -5) (undo-tree-id200 . -5) (undo-tree-id201 . -5) (undo-tree-id202 . -5) (undo-tree-id203 . -5) (undo-tree-id204 . -5) (undo-tree-id205 . -5) (undo-tree-id206 . -5) (undo-tree-id207 . -5) (undo-tree-id208 . -5) (undo-tree-id209 . -5) (undo-tree-id210 . -5) (undo-tree-id211 . -5) (undo-tree-id212 . -5) (undo-tree-id213 . -5) (undo-tree-id214 . -5) (undo-tree-id215 . -5) (undo-tree-id216 . -5) (undo-tree-id217 . -5) (undo-tree-id218 . -5) (undo-tree-id219 . -5) (undo-tree-id220 . -5) (undo-tree-id221 . -5) (undo-tree-id222 . -5) (2252 . 2253) (t 26068 53667 85759 966000)) nil (26068 58465 928296 0) 0 nil])
nil
